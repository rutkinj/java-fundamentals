/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public int[] roll(int numRolls){
        int[] retRolls = new int[numRolls];

        for(int i = 0; i < numRolls; i++ ){
            int roll = (int)Math.ceil(Math.random() * 6);
            System.out.println(roll);
            retRolls[i] = roll;
        }
        return retRolls;
    }

    public boolean conatinsDuplicates(int[] arr){
        for(int i = 0; i <= arr.length; i++){
            for(int j = i+1; j < arr.length; j++){
                if(arr[j] == arr[i]){
                    return true;
                }
            }
        }
        return false;
    }

    public float average(int[] arr){
        float total = 0f;
        for (int i = 0; i < arr.length; i++){
            total += arr[i];
        }
        return total/arr.length;
    }

    public int[] returnArrLowestAverage(int[][] arr){
        int index = 0;
        float lowAvg = average(arr[index]);
        for (int i = 1; i < arr.length; i++){
            float testAvg = average(arr[i]);
            if(testAvg < lowAvg){
                lowAvg = testAvg;
                index = i;
            }
        }
        return arr[index];
    }

    public String analyzeWeatherData(int[][] rawData){
        HashSet<Integer> data = new HashSet<>();
        int lowest = 300;
        int highest = 0;
        for(int[] dataSet : rawData){
            for(int datum : dataSet){
                data.add(datum);
                if (datum > highest){
                    highest = datum;
                }
                if (datum < lowest){
                    lowest = datum;
                }
            }
        }
        return returnFormattedWeather(highest, lowest, data);
    }

    public String returnFormattedWeather(int hi, int lo, HashSet data){
        // stringBuilder was Ben Lieberman's idea, thanks ben
        StringBuilder retStr = new StringBuilder();
        retStr.append("High: " + hi + "\n");
        retStr.append("Low: " + lo + "\n");
        for (int i = lo; i < hi; i++){
            if (!data.contains(i)){
                retStr.append("Never saw temperature: " + i + "\n");
            }
        }
        System.out.println();
        return retStr.substring(0,retStr.length()-1);
    }

    public String tally(List<String> votes){
        HashMap<String, Integer> voteCount = new HashMap<>();
        for(String vote: votes){
            try {
                voteCount.put(vote, voteCount.get(vote) + 1);
            } catch (NullPointerException npe){
                voteCount.put(vote, 1);
            }
        }
        Set<String> candidates = voteCount.keySet();
        String winner = "Write-in";
        int mostVotes = 0;
        for(String candidate : candidates){
            if(voteCount.get(candidate) > mostVotes){
                mostVotes = voteCount.get(candidate);
                winner = candidate;
            }
        }
        return winner + " received the most votes!";
    }
}
